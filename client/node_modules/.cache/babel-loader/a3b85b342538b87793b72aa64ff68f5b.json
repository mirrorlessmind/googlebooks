{"ast":null,"code":"var _jsxFileName = \"/Users/cigitipton/Desktop/googlebooks/googlebooks/src/pages/Books/Books.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Jumbotron from \"../../components/Jumbotron\";\nimport DeleteBtn from \"../../components/DeleteBtn\";\nimport API from \"../../utils/API\";\nimport { Col, Row, Container } from \"../../components/Grid\";\nimport { List, ListItem } from \"../../components/List\";\nimport { Input, TextArea, FormBtn } from \"../../components/Form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Books() {\n  _s();\n\n  // Setting our component's initial state\n  const [books, setBooks] = useState([]);\n  const [formObject, setFormObject] = useState({\n    title: \"\",\n    author: \"\",\n    synopsis: \"\"\n  }); // Load all books and store them with setBooks\n\n  useEffect(() => {\n    loadBooks();\n  }, []); // Loads all books and sets them to books\n\n  function loadBooks() {\n    API.getBooks().then(res => setBooks(res.data)).catch(err => console.log(err));\n  }\n\n  ; // Deletes a book from the database with a given id, then reloads books from the db\n\n  function deleteBook(id) {\n    API.deleteBook(id).then(res => loadBooks()).catch(err => console.log(err));\n  } // Handles updating component state when the user types into the input field\n\n\n  function handleInputChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormObject({ ...formObject,\n      [name]: value\n    });\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.title && formObject.author) {\n      API.saveBook({\n        title: formObject.title,\n        author: formObject.author,\n        synopsis: formObject.synopsis\n      }).then(() => setFormObject({\n        title: \"\",\n        author: \"\",\n        synopsis: \"\"\n      })).then(() => loadBooks()).catch(err => console.log(err));\n    }\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        size: \"md-6\",\n        children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"What Books Should I Read?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleInputChange,\n            name: \"title\",\n            placeholder: \"Title (required)\",\n            value: formObject.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleInputChange,\n            name: \"author\",\n            placeholder: \"Author (required)\",\n            value: formObject.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n            onChange: handleInputChange,\n            name: \"synopsis\",\n            placeholder: \"Synopsis (Optional)\",\n            value: formObject.synopsis\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FormBtn, {\n            disabled: !(formObject.author && formObject.title),\n            onClick: handleFormSubmit,\n            children: \"Submit Book\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        size: \"md-6 sm-12\",\n        children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Books On My List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), books.length ? /*#__PURE__*/_jsxDEV(List, {\n          children: books.map(book => {\n            return /*#__PURE__*/_jsxDEV(ListItem, {\n              children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"/books/\" + book._id,\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [book.title, \" by \", book.author]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(DeleteBtn, {\n                onClick: () => deleteBook(book._id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 23\n              }, this)]\n            }, book._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"No Results to Display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Books, \"Xsa4X87izsAObKeKcFNMea1Xd30=\");\n\n_c = Books;\nexport default Books;\n\nvar _c;\n\n$RefreshReg$(_c, \"Books\");","map":{"version":3,"sources":["/Users/cigitipton/Desktop/googlebooks/googlebooks/src/pages/Books/Books.js"],"names":["React","useEffect","useState","Jumbotron","DeleteBtn","API","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Books","books","setBooks","formObject","setFormObject","title","author","synopsis","loadBooks","getBooks","then","res","data","catch","err","console","log","deleteBook","id","handleInputChange","event","name","value","target","handleFormSubmit","preventDefault","saveBook","length","map","book","_id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Jumbotron from \"../../components/Jumbotron\";\nimport DeleteBtn from \"../../components/DeleteBtn\";\nimport API from \"../../utils/API\";\nimport { Col, Row, Container } from \"../../components/Grid\";\nimport { List, ListItem } from \"../../components/List\";\nimport { Input, TextArea, FormBtn } from \"../../components/Form\";\n\nfunction Books() {\n  // Setting our component's initial state\n  const [books, setBooks] = useState([])\n  const [formObject, setFormObject] = useState({\n    title: \"\",\n    author: \"\",\n    synopsis: \"\"\n  })\n\n  // Load all books and store them with setBooks\n  useEffect(() => {\n    loadBooks()\n  }, [])\n\n  // Loads all books and sets them to books\n  function loadBooks() {\n    API.getBooks()\n      .then(res => \n        setBooks(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Deletes a book from the database with a given id, then reloads books from the db\n  function deleteBook(id) {\n    API.deleteBook(id)\n      .then(res => loadBooks())\n      .catch(err => console.log(err));\n  }\n\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    const { name, value } = event.target;\n    setFormObject({...formObject, [name]: value})\n  };\n\n  // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    if (formObject.title && formObject.author) {\n      API.saveBook({\n        title: formObject.title,\n        author: formObject.author,\n        synopsis: formObject.synopsis\n      })\n        .then(() => setFormObject({\n          title: \"\",\n          author: \"\",\n          synopsis: \"\"\n        }))\n        .then(() => loadBooks())\n        .catch(err => console.log(err));\n    }\n  };\n\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-6\">\n            <Jumbotron>\n              <h1>What Books Should I Read?</h1>\n            </Jumbotron>\n            <form>\n              <Input\n                onChange={handleInputChange}\n                name=\"title\"\n                placeholder=\"Title (required)\"\n                value={formObject.title}\n              />\n              <Input\n                onChange={handleInputChange}\n                name=\"author\"\n                placeholder=\"Author (required)\"\n                value={formObject.author}\n              />\n              <TextArea\n                onChange={handleInputChange}\n                name=\"synopsis\"\n                placeholder=\"Synopsis (Optional)\"\n                value={formObject.synopsis}\n              />\n              <FormBtn\n                disabled={!(formObject.author && formObject.title)}\n                onClick={handleFormSubmit}\n              >\n                Submit Book\n              </FormBtn>\n            </form>\n          </Col>\n          <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>Books On My List</h1>\n            </Jumbotron>\n            {books.length ? (\n              <List>\n                {books.map(book => {\n                  return (\n                    <ListItem key={book._id}>\n                      <a href={\"/books/\" + book._id}>\n                        <strong>\n                          {book.title} by {book.author}\n                        </strong>\n                      </a>\n                      <DeleteBtn onClick={() => deleteBook(book._id)} />\n                    </ListItem>\n                  );\n                })}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}